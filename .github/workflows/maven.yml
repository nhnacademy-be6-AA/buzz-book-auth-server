# 이 워크플로우는 Maven을 사용하여 Java 프로젝트를 빌드하고,
# 의존성을 캐시하여 워크플로우 실행 시간을 개선합니다.
# 자세한 내용은: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# 이 워크플로우는 GitHub에서 인증되지 않은 서드파티 액션을 사용합니다.
# 이러한 액션은 별도의 서비스 약관, 개인정보 보호정책 및 지원 문서를 따릅니다.

name: Java CI with Maven

# 워크플로우가 실행되는 트리거를 정의합니다.
on:
  push:
    branches: [ "main" ] # main 브랜치에 push가 발생할 때 실행
  pull_request:
    branches: [ "main" ] # main 브랜치로의 pull request가 생성될 때 실행

jobs:
  build:
    runs-on: ubuntu-latest # 워크플로우가 실행될 환경 설정 (최신 Ubuntu 버전 사용)

    steps:
    - uses: actions/checkout@v4 # 리포지토리를 체크아웃합니다.
    
    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        java-version: '21' # JDK 21 설정
        distribution: 'temurin' # Temurin JDK 배포판 사용
        cache: maven # Maven 의존성 캐시 설정
        
    - name: Cache Maven packages
      uses: actions/cache@v1
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Cache SonarQube packages
      uses: actions/cache@v1
      with:
        path: ~/.sonar/cache # SonarQube 패키지 캐시 경로
        key: ${{ runner.os }}-sonar # 캐시 키 설정
        restore-keys: ${{ runner.os }}-sonar # 캐시 복원 키 설정

    - name: Build and analyze
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      run: mvn clean verify sonar:sonar \
        -Dsonar.projectKey=buzz-book-auth-server \
        -Dsonar.projectName='buzz-book-auth-server' \
        -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
        -Dsonar.login=${{ secrets.SONAR_TOKEN }}
    

    # 선택사항: 전체 의존성 그래프를 GitHub에 업로드하여 Dependabot 알림의 품질을 향상시킵니다.
    - name: Update dependency graph
      uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6 # 의존성 그래프 업데이트
